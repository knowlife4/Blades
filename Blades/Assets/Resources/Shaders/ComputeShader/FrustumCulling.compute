#pragma kernel Cull

struct BladesInstance
{
    float3 Position;
    float4x4 Rotation;
    float Height;
    float3 Color;
    float identity;
};

StructuredBuffer<BladesInstance> _bladeBuffer;
AppendStructuredBuffer<BladesInstance> _bladeBufferRender;

float _distance;
float4 _cameraPosition;
float4 _cameraForward;
float _cameraHalfDiagonalFovDotProduct;
int _ignoreRate;

[numthreads(32,1,1)]
void Cull (uint3 id : SV_DispatchThreadID)
{
    uint identifier = id.x;
    if(identifier > _bladeBuffer.Length) return;

    BladesInstance blade = _bladeBuffer[identifier];

    if(identifier % _ignoreRate != 0) return;

    if(distance(_cameraPosition.xyz, blade.Position) > _distance) return;

    float forward = dot(normalize(blade.Position - _cameraPosition.xyz), _cameraForward.xyz);
    if (forward < _cameraHalfDiagonalFovDotProduct) return;

    _bladeBufferRender.Append(blade);
}